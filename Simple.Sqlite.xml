<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simple.Sqlite</name>
    </assembly>
    <members>
        <member name="T:Simple.Sqlite.Attributes.AllowNullAttribute">
            <summary>
            Specify that this column should allow nulls
            </summary>
        </member>
        <member name="T:Simple.Sqlite.Attributes.DefaultValueAttribute">
            <summary>
            Specify default value for this column
            </summary>
        </member>
        <member name="M:Simple.Sqlite.Attributes.DefaultValueAttribute.#ctor(System.Object)">
            <summary>
            Creates a new instance
            </summary>
            <param name="defaultValue"></param>
        </member>
        <member name="T:Simple.Sqlite.Attributes.NotNullAttribute">
            <summary>
            Specify that this column should not allow nulls
            </summary>
        </member>
        <member name="T:Simple.Sqlite.Attributes.PrimaryKeyAttribute">
            <summary>
            Specify that this column is PrimaryKey
            </summary>
        </member>
        <member name="T:Simple.Sqlite.Attributes.UniqueAttribute">
            <summary>
            Specify that this column should only have unique values
            </summary>
        </member>
        <member name="T:Simple.Sqlite.ConfigurationDB">
            <summary>
            Represents a easy to use configuration set
            </summary>
        </member>
        <member name="F:Simple.Sqlite.ConfigurationDB.internalDb">
            <summary>
            Exposes the internal database engine
            </summary>
        </member>
        <member name="P:Simple.Sqlite.ConfigurationDB.DatabaseFileName">
            <summary>
            Database file full path
            </summary>
        </member>
        <member name="M:Simple.Sqlite.ConfigurationDB.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.Sqlite.ConfigurationDB.SetConfig``1(System.String,System.String,``0)">
            <summary>
            Sets a configuration value
            </summary>
            <typeparam name="T">Type of the configuration value</typeparam>
            <param name="ConfigKey">Key to locate the configration in the category</param>
            <param name="ConfigCategory">Category of the configuration</param>
            <param name="Value">Value to be stored</param>
        </member>
        <member name="M:Simple.Sqlite.ConfigurationDB.ReadConfig``1(System.String,System.String,``0)">
            <summary>
            [DEPRECATED] Use 'GetConfig' instead
            </summary>
        </member>
        <member name="M:Simple.Sqlite.ConfigurationDB.GetConfig``1(System.String,System.String,``0)">
            <summary>
            Gets a configuration value
            </summary>
            <typeparam name="T">Type of the configuration value</typeparam>
            <param name="ConfigKey">Key to locate the configration in the category</param>
            <param name="ConfigCategory">Category of the configuration</param>
            <param name="Default">Default value if none exists</param>
            <returns>Saved value</returns>
        </member>
        <member name="M:Simple.Sqlite.ConfigurationDB.RemoveConfig(System.String,System.String)">
            <summary>
            Remove a stored item
            </summary>
            <param name="ConfigKey">Key to locate the configration in the category</param>
            <param name="ConfigCategory">Category of the configuration</param>
        </member>
        <member name="M:Simple.Sqlite.ConfigurationDB.FromDB(Simple.Sqlite.ConfigurationDB)">
            <summary>
            Create a new instance based on an existing ConfigurationDB
            </summary>
        </member>
        <member name="M:Simple.Sqlite.ConfigurationDB.FromDB(Simple.Sqlite.NoSqliteStorage)">
            <summary>
            Create a new instance based on an existing NoSqliteStorage
            </summary>
        </member>
        <member name="M:Simple.Sqlite.ConfigurationDB.FromDB(Simple.Sqlite.SqliteDB)">
            <summary>
            Create a new instance based on an existing SqliteDB
            </summary>
        </member>
        <member name="T:Simple.Sqlite.SqliteType">
            <summary>
            Represents a Sqlite internal type
            </summary>
        </member>
        <member name="F:Simple.Sqlite.SqliteType.INTEGER">
            <summary>
            Numeric without decimal places
            </summary>
        </member>
        <member name="F:Simple.Sqlite.SqliteType.TEXT">
            <summary>
            Sqlite text
            </summary>
        </member>
        <member name="F:Simple.Sqlite.SqliteType.BLOB">
            <summary>
            Binary data or anythng (sqlite is dynamic typed)
            </summary>
        </member>
        <member name="F:Simple.Sqlite.SqliteType.REAL">
            <summary>
            Numeric with decimal places
            </summary>
        </member>
        <member name="F:Simple.Sqlite.SqliteType.NUMERIC">
            <summary>
            Numeric value. Includes Bool, Date and Datetime
            </summary>
        </member>
        <member name="T:Simple.Sqlite.OnConflict">
            <summary>
            OnConflict clause options
            </summary>
        </member>
        <member name="F:Simple.Sqlite.OnConflict.RollBack">
            <summary>
            When an applicable constraint violation occurs, the ROLLBACK resolution algorithm aborts the current SQL statement 
            with an SQLITE_CONSTRAINT error and rolls back the current transaction. 
            If no transaction is active (other than the implied transaction that is created on every command) then the ROLLBACK 
            resolution algorithm works the same as the ABORT algorithm
            </summary>
        </member>
        <member name="F:Simple.Sqlite.OnConflict.Abort">
            <summary>
            When an applicable constraint violation occurs, 
            the ABORT resolution algorithm aborts the current SQL statement with an SQLITE_CONSTRAINT error and backs out any 
            changes made by the current SQL statement; 
            but changes caused by prior SQL statements within the same transaction are preserved and the transaction remains active. 
            This is the default behavior and the behavior specified by the SQL standard
            </summary>
        </member>
        <member name="F:Simple.Sqlite.OnConflict.Fail">
            <summary>
            When an applicable constraint violation occurs, the FAIL resolution algorithm aborts the current SQL statement with an SQLITE_CONSTRAINT error. 
            But the FAIL resolution does not back out prior changes of the SQL statement that failed nor does it end the transaction. 
            For example, if an UPDATE statement encountered a constraint violation on the 100th row that it attempts to update, 
            then the first 99 row changes are preserved but changes to rows 100 and beyond never occur.
            The FAIL behavior only works for uniqueness, NOT NULL, and CHECK constraints. A foreign key constraint violation causes an ABORT
            </summary>
        </member>
        <member name="F:Simple.Sqlite.OnConflict.Ignore">
            <summary>
            When an applicable constraint violation occurs, 
            the IGNORE resolution algorithm skips the one row that contains the constraint violation and continues processing 
            subsequent rows of the SQL statement as if nothing went wrong. 
            Other rows before and after the row that contained the constraint violation are inserted or updated normally. 
            No error is returned for uniqueness, NOT NULL, and UNIQUE constraint errors when the IGNORE conflict resolution algorithm is used. 
            However, the IGNORE conflict resolution algorithm works like ABORT for foreign key constraint errors
            </summary>
        </member>
        <member name="F:Simple.Sqlite.OnConflict.Replace">
            <summary>
            When a UNIQUE or PRIMARY KEY constraint violation occurs, 
            the REPLACE algorithm deletes pre-existing rows that are causing the constraint violation prior to inserting or 
            updating the current row and the command continues executing normally. 
            If a NOT NULL constraint violation occurs, the REPLACE conflict resolution replaces the NULL value with the default value for that column, 
            or if the column has no default value, then the ABORT algorithm is used. If a CHECK constraint or foreign key constraint violation occurs, 
            the REPLACE conflict resolution algorithm works like ABORT
            </summary>
        </member>
        <member name="T:Simple.Sqlite.NoSqliteStorage">
            <summary>
            Easy access a local no-sql document storage
            </summary>
        </member>
        <member name="F:Simple.Sqlite.NoSqliteStorage.internalDb">
            <summary>
            Exposes the internal database engine
            </summary>
        </member>
        <member name="P:Simple.Sqlite.NoSqliteStorage.CompressEachEntry">
            <summary>
            Specify if new values should be compressed before storage
            </summary>
        </member>
        <member name="P:Simple.Sqlite.NoSqliteStorage.DatabaseFileName">
            <summary>
            Database file full path
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.Store``1(System.Guid,``0)">
            <summary>
            Stores a new item
            </summary>
            <typeparam name="T">Type of stored item</typeparam>
            <param name="Key">A Key to locate the item later</param>
            <param name="Object">The item to be stored</param>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.Store``1(System.String,``0)">
            <summary>
            Stores a new item
            </summary>
            <typeparam name="T">Type of stored item</typeparam>
            <param name="Key">A Key to locate the item later</param>
            <param name="Object">The item to be stored</param>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.Store``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Guid})">
            <summary>
            Stores many items
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.Store``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Stores many items
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.Retrieve``1(System.Guid)">
            <summary>
            Retrieves a stored item
            </summary>
            <typeparam name="T">Type of stored item</typeparam>
            <param name="Key">The Key to locate the stored item</param>
            <returns>Stored item or Defult(T)</returns>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.Retrieve``1(System.String)">
            <summary>
            Retrieves a stored item
            </summary>
            <typeparam name="T">Type of stored item</typeparam>
            <param name="Key">The Key to locate the stored item</param>
            <returns>Stored item or Defult(T)</returns>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.Remove(System.Guid)">
            <summary>
            Remove a stored item
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.Remove(System.String)">
            <summary>
            Remove a stored item
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.GetAllKeys">
            <summary>
            Retrieves all stored Keys
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.GetAllGuids">
            <summary>
            Retrieves all stored Guids
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.FromDB(Simple.Sqlite.ConfigurationDB)">
            <summary>
            Create a new instance based on an existing ConfigurationDB
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.FromDB(Simple.Sqlite.NoSqliteStorage)">
            <summary>
            Create a new instance based on an existing NoSqliteStorage
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.FromDB(Simple.Sqlite.SqliteDB)">
            <summary>
            Create a new instance based on an existing SqliteDB
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:Simple.Sqlite.TableMapper">
            <summary>
            Class to map a table schema
            </summary>
        </member>
        <member name="T:Simple.Sqlite.TableMapper.Column">
            <summary>
            Class to map a column schema
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.ColumnName">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.SqliteType">
            <summary>
            Type on SQLite database
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.NativeType">
            <summary>
            Native object type
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.IsPK">
            <summary>
            Is PrimaryKey ?
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.IsAI">
            <summary>
            Is Auto-Increment ?
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.IsUnique">
            <summary>
            Is Unique indexed ?
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.AllowNulls">
            <summary>
            Allow null values ?
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.DefaultValue">
            <summary>
            Default value on NULL
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Column.FromInfo(Simple.DatabaseWrapper.TypeReader.TypeInfo,Simple.DatabaseWrapper.TypeReader.TypeItemInfo)">
            <summary>
            Create a column schema from TypeInfoItem
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Column.mapType(Simple.DatabaseWrapper.TypeReader.TypeItemInfo)">
            <summary>
            Creates a column schema from a Type
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Column.ExportColumnDefinitionAsStatement">
            <summary>
            Creates a CREATE TABLE column statment from current schema
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Column.ExportAddColumnAsStatement">
            <summary>
            Creates a ADD COLUMN from current schema. 
            This MAY change de [DefaultValue] when [NotNull] to Comply with Sqlite
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.#ctor(Simple.Sqlite.SqliteDB,Simple.DatabaseWrapper.TypeReader.ReaderCachedCollection)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Add``1">
            <summary>
            Adds a table
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.ConfigureTable(System.Action{Simple.DatabaseWrapper.Interfaces.ITable})">
            <summary>
            Allows last added table to be editted
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Commit">
            <summary>
            Commit all new tables to the db (old schemas are not updated (yet)
            </summary>
        </member>
        <member name="T:Simple.Sqlite.TableMapper.TableCommitResult">
            <summary>
            Class for the table commit results
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.TableCommitResult.TableName">
            <summary>
            Name of the table added/altered
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.TableCommitResult.WasTableCreated">
            <summary>
            Gets if the table was altered
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.TableCommitResult.ColumnsAdded">
            <summary>
            Gets the new added columns, if any
            </summary>
        </member>
        <member name="T:Simple.Sqlite.TableMapper.Table">
            <summary>
            Represents a table schema
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Table.TableName">
            <summary>
            Table's name
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Table.Columns">
            <summary>
            Table's columns
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Table.Item(System.Int32)">
            <summary>
            Gets the N-th column
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Table.Item(System.String)">
            <summary>
            Gets the column by name
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Table.ExportCreateTable">
            <summary>
            Creates a CREATE TABLE statment from current schema
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Table.FromType(Simple.DatabaseWrapper.TypeReader.TypeInfo)">
            <summary>
            Creates a table schema from a Type
            </summary>
        </member>
        <member name="T:Simple.Sqlite.SqliteDB">
            <summary>
            Easy access a local database
            How to use: Create new instance, call CreateTables(), chain Add[T] to add tables to it then Commit(), after that just call the other methods
            </summary>
        </member>
        <member name="F:Simple.Sqlite.SqliteDB.EnabledDatabaseBackup">
            <summary>
            Allows any instance of SqliteDB to executa a backup of the current database
            </summary>
        </member>
        <member name="P:Simple.Sqlite.SqliteDB.DatabaseFileName">
            <summary>
            Database file full path
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.CreateTables">
            <summary>
            Builds the table creation sequence, should be finished with Commit()
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.GetAllTables">
            <summary>
            Get a list of all tables
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.GetTableSchema(System.String)">
            <summary>
            Gets the schema for a table
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.ExecuteNonQuery(System.String,System.Object)">
            <summary>
            Executes a NonQuery command, this method locks the execution
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.ExecuteScalar``1(System.String,System.Object)">
            <summary>
            Executes a Scalar commands and return the value as T
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.ExecuteReader(System.String,System.Object)">
            <summary>
            Executes a query and returns as DataTable
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.ExecuteQuery``1(System.String,System.Object)">
            <summary>
            Executes a query and returns the value as a T collection
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.Query``1(System.String,System.Object)">
            <summary>
            Executes a query and returns the result as a T collection
            This is an alias to ExecuteReader
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.QueryFirst``1(System.String,System.Object)">
            <summary>
            Executes a query and returns the result the first T, 
            or InvalidOperationException if empty
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.QueryOrDefault``1(System.String,System.Object)">
            <summary>
            Executes a query and returns the result the first T or Defult(T)
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.Get``1(System.Object)">
            <summary>
            Gets a single T with specified table KeyValue on KeyColumn
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.Get``1(System.String,System.Object)">
            <summary>
            Gets a single T with specified table KeyValue on KeyColumn
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.GetAll``1">
            <summary>
            Queries the database to all T rows in the table
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.GetAllWhere``1(System.String,System.Object)">
            <summary>
            Queries the database to all T rows in the table with specified table KeyValue on KeyColumn
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.Insert``1(``0,Simple.Sqlite.OnConflict,System.String)">
            <summary>
            Inserts a new T and return it's ID, this method locks the execution
            </summary>
            <param name="Item">Item to be added</param>
            <param name="resolution">Conflict resolution method</param>
            <param name="tableName">Name of the table, uses T class name if null</param>
            <returns></returns>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.InsertInto``1(``0,Simple.Sqlite.OnConflict,System.String)">
            <summary>
            Inserts a new T and return it's ID, this method locks the execution
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.InsertOrReplace``1(``0)">
            <summary>
            Inserts a new T or replace with current T and return it's ID, this method locks the execution.
            When a Repalce occurs, the row is first deleted then re-inserted.
            Must have a [Unique] or PK column. 
            </summary>
            <returns>Returns `sqlite3:last_insert_rowid()`</returns>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.BulkInsert``1(System.Collections.Generic.IEnumerable{``0},Simple.Sqlite.OnConflict,System.String)">
            <summary>
            Inserts many T items into the database and return their IDs, this method locks the execution
            </summary>
            <param name="Items">Items to be inserted</param>
            <param name="resolution">Conflict resolution method</param>
            <param name="tableName">Name of the table, uses T class name if null</param>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.BulkInsert``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Inserts many T items into the database and return their IDs, this method locks the execution
            </summary>
        </member>
    </members>
</doc>
