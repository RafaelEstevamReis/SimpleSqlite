using System.IO;
using System.IO.Compression;

namespace Simple.Sqlite;

internal class BinaryResources
{
    /// <summary>
    /// Empty sqlitev3 database file, in WAL mode, compressed with .Net GZ
    /// </summary>
    private static readonly byte[] empty_v3_wal_gz = {
        0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0A, 0xED, 0xD0, 0x3D, 0x0A, 0xC2, 0x40,
        0x10, 0xC5, 0xF1, 0xC9, 0xC6, 0x56, 0xCC, 0x05, 0x02, 0x53, 0x6A, 0x63, 0xE3, 0x05, 0x8C, 0x92,
        0x2E, 0x20, 0x6A, 0x2E, 0x10, 0x71, 0x95, 0x45, 0xF3, 0xC1, 0xB2, 0x4D, 0x0A, 0x6F, 0xE5, 0x01,
        0x55, 0x30, 0x58, 0x6A, 0x2D, 0xFF, 0x1F, 0x3C, 0xDE, 0x63, 0xCA, 0xD9, 0x6F, 0x0B, 0x17, 0xAC,
        0x9E, 0x5A, 0x5F, 0x57, 0x41, 0x17, 0x92, 0x88, 0x31, 0xB2, 0x54, 0x15, 0x91, 0xF8, 0x19, 0xF3,
        0x4E, 0xF4, 0xEE, 0x91, 0x7C, 0x44, 0xF2, 0x5D, 0x2C, 0xF3, 0xCD, 0x6D, 0xFC, 0x5A, 0x89, 0xC8,
        0xE4, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x77, 0x45, 0x9A, 0x46, 0x2E, 0x54, 0x87, 0xAB,
        0x6D, 0xDA, 0x60, 0xEB, 0x2E, 0xF4, 0x43, 0x9B, 0xF5, 0x2E, 0xCF, 0xCA, 0x5C, 0xCB, 0x6C, 0x55,
        0xE4, 0x3A, 0x5C, 0x75, 0xEA, 0x8E, 0xEA, 0x9A, 0x60, 0xCF, 0xD6, 0x6B, 0xE7, 0x5D, 0x5D, 0xF9,
        0x5E, 0x2F, 0xB6, 0x9F, 0xF1, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xDF, 0x03, 0x79, 0x43,
        0x5B, 0x9D, 0x00, 0x20, 0x00, 0x00
    };
    internal static byte[] getEmptyV3_WAL()
    {
        using var compressed = new MemoryStream(empty_v3_wal_gz);
        using var gz = new GZipStream(compressed, CompressionMode.Decompress);
        using var result = new MemoryStream();
        gz.CopyTo(result);
        return result.ToArray();
    }
}
