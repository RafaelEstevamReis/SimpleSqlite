<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simple.Sqlite</name>
    </assembly>
    <members>
        <member name="T:Simple.Sqlite.Attributes.AllowNullAttribute">
            <summary>
            Specify that this column should allow nulls
            </summary>
        </member>
        <member name="T:Simple.Sqlite.Attributes.DefaultValueAttribute">
            <summary>
            Specify default value for this column
            </summary>
        </member>
        <member name="P:Simple.Sqlite.Attributes.DefaultValueAttribute.DefaultValue">
            <summary>
            Default value specified
            </summary>
        </member>
        <member name="M:Simple.Sqlite.Attributes.DefaultValueAttribute.#ctor(System.Object)">
            <summary>
            Creates a new instance
            </summary>
            <param name="defaultValue"></param>
        </member>
        <member name="T:Simple.Sqlite.Attributes.NotNullAttribute">
            <summary>
            Specify that this column should not allow nulls
            </summary>
        </member>
        <member name="T:Simple.Sqlite.Attributes.PrimaryKeyAttribute">
            <summary>
            Specify that this column is PrimaryKey
            </summary>
        </member>
        <member name="T:Simple.Sqlite.Attributes.UniqueAttribute">
            <summary>
            Specify that this column should only have unique values
            </summary>
        </member>
        <member name="T:Simple.Sqlite.SqliteType">
            <summary>
            Represents a Sqlite internal type
            </summary>
        </member>
        <member name="F:Simple.Sqlite.SqliteType.INTEGER">
            <summary>
            Numeric without decimal places
            </summary>
        </member>
        <member name="F:Simple.Sqlite.SqliteType.TEXT">
            <summary>
            Sqlite text
            </summary>
        </member>
        <member name="F:Simple.Sqlite.SqliteType.BLOB">
            <summary>
            Binary data or anythng (sqlite is dynamic typed)
            </summary>
        </member>
        <member name="F:Simple.Sqlite.SqliteType.REAL">
            <summary>
            Numeric with decimal places
            </summary>
        </member>
        <member name="F:Simple.Sqlite.SqliteType.NUMERIC">
            <summary>
            Numeric value. Includes Bool, Date and Datetime
            </summary>
        </member>
        <member name="T:Simple.Sqlite.NoSqliteStorage">
            <summary>
            Easy access a local no-sql document storage
            </summary>
        </member>
        <member name="P:Simple.Sqlite.NoSqliteStorage.CompressEachEntry">
            <summary>
            Specify if new values should be compressed before storage
            </summary>
        </member>
        <member name="P:Simple.Sqlite.NoSqliteStorage.DatabaseFileName">
            <summary>
            Database file full path
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.Store``1(System.Guid,``0)">
            <summary>
            Stores a new item
            </summary>
            <typeparam name="T">Type of stored item</typeparam>
            <param name="Key">A Key to locate the item later</param>
            <param name="Object">The item to be stored</param>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.Store``1(System.String,``0)">
            <summary>
            Stores a new item
            </summary>
            <typeparam name="T">Type of stored item</typeparam>
            <param name="Key">A Key to locate the item later</param>
            <param name="Object">The item to be stored</param>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.Retrieve``1(System.Guid)">
            <summary>
            Retrieves a stored item
            </summary>
            <typeparam name="T">Type of stored item</typeparam>
            <param name="Key">The Key to locate the stored item</param>
            <returns>Stored item or Defult(T)</returns>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.Retrieve``1(System.String)">
            <summary>
            Retrieves a stored item
            </summary>
            <typeparam name="T">Type of stored item</typeparam>
            <param name="Key">The Key to locate the stored item</param>
            <returns>Stored item or Defult(T)</returns>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.GetAllKeys">
            <summary>
            Retrieves all stored Keys
            </summary>
        </member>
        <member name="M:Simple.Sqlite.NoSqliteStorage.GetAllGuids">
            <summary>
            Retrieves all stored Guids
            </summary>
        </member>
        <member name="T:Simple.Sqlite.TableMapper">
            <summary>
            Class to map a table schema
            </summary>
        </member>
        <member name="T:Simple.Sqlite.TableMapper.Column">
            <summary>
            Class to map a column schema
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.ColumnName">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.SqliteType">
            <summary>
            Type on SQLite database
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.NativeType">
            <summary>
            Native object type
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.IsPK">
            <summary>
            Is PrimaryKey ?
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.IsAI">
            <summary>
            Is Auto-Increment ?
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.IsUnique">
            <summary>
            Is Unique indexed ?
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.AllowNulls">
            <summary>
            Allow null values ?
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Column.DefaultValue">
            <summary>
            Default value on NULL
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Column.FromType(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Creates a column schema from a Type
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Column.ExportColumnDefinitionAsStatement">
            <summary>
            Creates a CREATE TABLE column statment from current schema
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Column.ExportAddColumnAsStatement">
            <summary>
            Creates a ADD COLUMN from current schema. 
            This MAY change de [DefaultValue] when [NotNull] to Comply with Sqlite
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.#ctor(Simple.Sqlite.SqliteDB)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Add``1">
            <summary>
            Adds a table
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.ConfigureTable(System.Action{Simple.Sqlite.TableMapper.Table})">
            <summary>
            Allows last added table to be editted
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Commit">
            <summary>
            Commit all new tables to the db (old schemas are not updated (yet)
            </summary>
        </member>
        <member name="T:Simple.Sqlite.TableMapper.TableCommitResult">
            <summary>
            Class for the table commit results
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.TableCommitResult.TableName">
            <summary>
            Name of the table added/altered
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.TableCommitResult.WasTableCreated">
            <summary>
            Gets if the table was altered
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.TableCommitResult.ColumnsAdded">
            <summary>
            Gets the new added columns, if any
            </summary>
        </member>
        <member name="T:Simple.Sqlite.TableMapper.Table">
            <summary>
            Represents a table schema
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Table.TableName">
            <summary>
            Table's name
            </summary>
        </member>
        <member name="P:Simple.Sqlite.TableMapper.Table.Columns">
            <summary>
            Table's columns
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Table.ExportCreateTable">
            <summary>
            Creates a CREATE TABLE statment from current schema
            </summary>
        </member>
        <member name="M:Simple.Sqlite.TableMapper.Table.FromType(System.Type)">
            <summary>
            Creates a table schema from a Type
            </summary>
        </member>
        <member name="T:Simple.Sqlite.SqliteDB">
            <summary>
            Easy access a local database
            How to use: Create new instance, call CreateTables(), chain Add[T] to add tables to it then Commit(), after that just call the other methods
            </summary>
        </member>
        <member name="P:Simple.Sqlite.SqliteDB.DatabaseFileName">
            <summary>
            Database file full path
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.CreateTables">
            <summary>
            Builds the table creation sequence, should be finished with Commit()
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.GetAllTables">
            <summary>
            Get a list of all tables
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.GetTableSchema(System.String)">
            <summary>
            Gets the schema for a table
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.ExecuteNonQuery(System.String,System.Object)">
            <summary>
            Executes a NonQUery command, this method locks the execution
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.ExecuteScalar``1(System.String,System.Object)">
            <summary>
            Executes a Scalar commands and return the value as T
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.ExecuteReader(System.String,System.Object)">
            <summary>
            Executes a query and returns as DataTable
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.ExecuteQuery``1(System.String,System.Object)">
            <summary>
            Executes a query and returns the value as a T collection
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.Get``1(System.Object)">
            <summary>
            Gets a single T with specified table KeyValue on KeyColumn
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.Get``1(System.String,System.Object)">
            <summary>
            Gets a single T with specified table KeyValue on KeyColumn
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.GetAll``1">
            <summary>
            Queries the database to all T rows in the table
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.GetAllWhere``1(System.String,System.Object)">
            <summary>
            Queries the database to all T rows in the table with specified table KeyValue on KeyColumn
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.Insert``1(``0)">
            <summary>
            Inserts a new T and return it's ID, this method locks the execution
            </summary>
            <returns>Returns `sqlite3:last_insert_rowid()`</returns>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.BulkInsert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inserts many T items into the database and return their IDs, this method locks the execution
            </summary>
        </member>
        <member name="M:Simple.Sqlite.SqliteDB.InsertOrReplace``1(``0)">
            <summary>
            Inserts a new T or replace with current T and return it's ID, this method locks the execution
            Must have a [Unique] or PK column
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.KeyAttribute">
            <summary>
            Replacement for.NetCore System.ComponentModel.DataAnnotations
            </summary>
        </member>
    </members>
</doc>
